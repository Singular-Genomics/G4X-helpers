{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"G4X-helpers","text":""},{"location":"#g4x-helpers","title":"G4X-helpers","text":""},{"location":"#helper-models-and-post-processing-tools-for-g4x-data","title":"Helper models and post-processing tools for G4X-data.","text":"<p>With G4X-helpers we provide an open-source toolkit for common downstream tasks \u2014 such as applying custom segmentations or adding your own labels to the G4X-viewer. You can access its core features from the command-line interface (CLI) and additionally import it as a standalone Python package to interact with your data.</p>"},{"location":"#in-this-section-you-can-learn","title":"In this section you can learn:","text":"<ul> <li>how to install G4X-helpers on your system</li> <li>find a description of CLI features </li> <li>get started with using the command line interface (CLI)</li> </ul> <p>\u2e3b</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v052-2025-10-01","title":"<code>v0.5.2</code> \u2014 [2025-10-01]","text":"<ul> <li>fix: missing tests in publish workflow</li> </ul>"},{"location":"changelog/#v051-2025-10-01","title":"<code>v0.5.1</code> \u2014 [2025-10-01]","text":"<ul> <li>pkg: added PyPI publish workflow</li> <li>fix: README logo link</li> </ul>"},{"location":"changelog/#v050-2025-10-01","title":"<code>v0.5.0</code> \u2014 [2025-10-01]","text":"<ul> <li>docs: formatting</li> <li>docs: spell check</li> <li>docs: integrate redemux docs</li> <li>docs: Docs restructuring (#33)</li> <li> <p>docs: updated _core docs</p> </li> <li> <p>feat: Redemux tool (#30)</p> </li> <li> <p>feat: progress bar</p> </li> <li> <p>fix: G4Xoutput out_dir now defaults to cwd instead of run_base</p> </li> <li>fix: enforce cluster color as hex-codes</li> <li>fix: auto-conversion of clusters to 'categorical' when load_clustering=true</li> <li>fix: change all segmentation_cell_id to cell_id (#34)</li> <li> <p>fix: cellid_key - bugfix</p> </li> <li> <p>pkg: updated ruff</p> </li> <li>pkg: relaxing glymur dependency</li> <li>pkg: relaxed protobuf requirement for internal alignment</li> <li>pkg: opening python requirements to include 3.11</li> <li>pkg: removed bump-my-version and replacing with uv-ship</li> </ul>"},{"location":"changelog/#v0414-2025-08-12","title":"<code>v0.4.14</code> \u2014 [2025-08-12]","text":""},{"location":"changelog/#fixes","title":"Fixes:","text":"<ul> <li><code>tar_viewer</code> will now exit leaving the source folder unchanged</li> </ul>"},{"location":"changelog/#improvements","title":"Improvements:","text":"<ul> <li><code>tar_viewer</code> now requires an out_path</li> </ul>"},{"location":"changelog/#v0413-2025-08-11","title":"<code>v0.4.13</code> \u2013 (2025-08-11)","text":""},{"location":"changelog/#docs","title":"Docs:","text":"<ul> <li>changelog now included in docs</li> <li>url updates</li> <li>typos</li> </ul>"},{"location":"changelog/#package","title":"Package:","text":"<ul> <li>deployment of multi-arch packages</li> <li>replaced dependency <code>ray</code> with <code>multiprocessing</code></li> <li>set required <code>uv</code> version</li> </ul>"},{"location":"changelog/#v0412-2025-07-25","title":"<code>v0.4.12</code> \u2014 [2025-07-25]","text":""},{"location":"changelog/#docs_1","title":"Docs:","text":"<ul> <li>Added Documentation for G4X-helpers and G4X-output</li> </ul>"},{"location":"changelog/#package_1","title":"Package:","text":"<ul> <li>Implemented bump-my-version for handling version updates and tagging</li> <li>Added pre-commit hooks for code quality checks</li> <li>Ruff for linting and formatting (invoked via pre-commit)</li> <li>Github actions for automated package builds and docs deployment</li> </ul>"},{"location":"changelog/#improvements_1","title":"Improvements:","text":"<ul> <li>Added npz util to speed up <code>G4Xoutput()</code> initialization</li> </ul>"},{"location":"changelog/#fixes_1","title":"Fixes:","text":"<ul> <li>Incorrect gzip compression on some output csvs</li> </ul>"},{"location":"changelog/#housekeeping","title":"Housekeeping:","text":"<ul> <li>Updated and trimmed dependencies</li> <li>Cleaned up .gitignore file</li> <li>Cleaned up README.md</li> </ul>"},{"location":"changelog/#v024-v0411-unreleased","title":"<code>v0.2.4</code> - <code>v0.4.11</code> (unreleased)","text":"<ul> <li>Release preparation</li> <li>Add Dockerfile</li> <li>Update dependency information</li> </ul>"},{"location":"changelog/#v023-2025-06-25","title":"<code>v0.2.3</code> \u2014 [2025-06-25]","text":"<ul> <li>Add tar_viewer tool to tar up a G4X-viewer folder for the single-file upload option.</li> </ul>"},{"location":"changelog/#v022-2025-06-24","title":"<code>v0.2.2</code> \u2014 [2025-06-24]","text":"<ul> <li>Add new_bin tool to more quickly generate a new bin file</li> </ul>"},{"location":"changelog/#v021-2025-06-02","title":"<code>v0.2.1</code> \u2014 [2025-06-02]","text":"<ul> <li>Bug fixes for MVP functionality</li> </ul>"},{"location":"changelog/#v020-2025-05-16","title":"<code>v0.2.0</code> \u2014 [2025-05-16]","text":"<ul> <li>Add CLI tools for re-segmentation and updating bin files with clustering/embedding information</li> </ul>"},{"location":"contributing/","title":"contributing","text":""},{"location":"contributing/#contributing","title":"Contributing","text":"Contributions to G4X-helpers are welcome! <p>This section provides some guidelines and tips to follow when you wish to enrich the project with your own code or documentation.</p>"},{"location":"contributing/#index","title":"Index","text":"<ul> <li>Development workflow </li> <li>Working with git</li> <li>Building and managing your environment</li> <li>Documentation</li> <li>Releasing a new version</li> </ul> <p>Info</p> <p>Parts of these guidelines have been adapted from the scanpy docs, which in turn built on the work done by pandas and MDAnalysis. We highly recommend checking out these excellent guides to learn more.</p> <p></p>"},{"location":"contributing/#development-workflow","title":"Development workflow","text":"<p>The life-cycle of a new feature or other contribution should follow this pattern:</p> <ol> <li>Fork the <code>G4X-helpers</code> repository to your own GitHub account</li> <li>Create an environment with all dev-dependencies</li> <li>Create a new branch for your feature or bugfix</li> <li>Commit your contribution to the codebase</li> <li>Update and check the documentation</li> <li>Open a PR back to the main repository</li> </ol> <p></p>"},{"location":"contributing/#working-with-git","title":"Working with <code>git</code>","text":"<p>This section of the docs covers our practices for working with <code>git</code> on our codebase. For more in-depth guides, we can recommend a few sources:</p> <p>Atlassian's git tutorial : Beginner friendly introductions to the git command line interface</p> <p>Setting up git for GitHub : Configuring git to work with your GitHub user account</p>"},{"location":"contributing/#forking-and-cloning","title":"Forking and cloning","text":"<p>To get the code, and be able to push changes back to the main project, you'll need to (1) fork the repository on github and (2) clone the repository to your local machine.</p> <p>This is very straight forward if you're using GitHub's CLI:</p> <pre><code>$ gh repo fork Singular-Genomics/G4X-helpers --clone --remote\n</code></pre> <p>This will fork the repo to your github account, create a clone of the repo on your current machine, add our repository as a remote, and set the <code>main</code> development branch to track our repository.</p> <p>To do this manually, first make a fork of the repository by clicking the \"fork\" button on our main github package. Then, on your machine, run:</p> <pre><code># Clone your fork of the repository (substitute in your username)\n$ git clone https://github.com/{your-username}/G4X-helpers.git\n\n# Enter the cloned repository\n$ cd G4X-helpers\n\n# Add our repository as a remote\n$ git remote add upstream https://github.com/Singular-Genomics/G4X-helpers.git\n</code></pre>"},{"location":"contributing/#creating-a-branch-for-your-feature","title":"Creating a branch for your feature","text":"<p>All development should occur in branches dedicated to the particular work being done. Additionally, unless you are a maintainer, all changes should be directed at the <code>main</code> branch. You can create a branch with:</p> <pre><code>$ git checkout main                 # Starting from the main branch\n$ git pull                          # Syncing with the repo\n$ git switch -c {your-branch-name}  # Making and changing to the new branch\n</code></pre>"},{"location":"contributing/#committing-your-code","title":"Committing your code","text":"<p>Keep commits small, focused, and well-described. This makes code review easier and history clearer. When you are ready, add the files that belong to your commit:</p> <pre><code>$ git status              # See what changed\n$ git add -p              # Interactively stage only the hunks you want\n\n# or everything\n$ git add .\n</code></pre> <p>Write a clear commit-message. Use an imperative, one-line summary (\u2264 72 chars).  </p> <pre><code>$ git commit -m \"Fix NPE in sample parser when header is missing\"\n</code></pre> <p>Tip</p> <p>Need to fix the last commit before pushing? <code>git commit --amend</code> lets you change the message or add more files.</p>"},{"location":"contributing/#opening-a-pull-request","title":"Opening a pull request","text":"<p>When you're ready to have your code reviewed, push your changes up to your fork:</p> <pre><code># The first time you push the branch, you'll need to tell git where\n$ git push --set-upstream origin {your-branch-name}\n\n# After that, just use\n$ git push\n</code></pre> <p>Then open a pull request by going to the main repo and clicking <code>New pull request</code>. GitHub may also prompt you to open PRs for recently pushed branches.</p> <p>Info</p> <p>It is important to summarize your changes in the description of the PR so that they get included in the next change-log</p> <p>We'll try and get back to you soon!</p> <p></p>"},{"location":"contributing/#building-and-managing-your-environment","title":"Building and managing your environment","text":""},{"location":"contributing/#installing-project-dependencies","title":"Installing project dependencies","text":"<p>It is recommended to develop your feature in an isolated virtual environment. There are many environment managers available for Python (conda, pyenv, Virtualenv ...)</p> <p>We recommend using uv, which can manage your virtual environment and use the project's <code>uv.lock</code> file to replicate all dependencies from exact sources.</p> <p>After installing uv, you can build the environment by calling: <pre><code>$ uv sync\n</code></pre></p> <p>A folder named <code>.venv</code> will be created. It holds the correct python version and all project dependencies. It will also install necessary development tools like <code>ruff</code>, <code>mkdocs</code>, <code>pre-commit</code>, <code>bump-my-version</code>.</p> <p>You can now activate this environment with: <pre><code>$ source .venv/bin/activate\n</code></pre></p> <p></p>"},{"location":"contributing/#using-pre-commit-hooks","title":"Using pre-commit hooks","text":"<p>We use pre-commit to run various checks on new code.  </p> <p>In order for it to attach to your commits automatically, you need to install it once after building your environment. </p> <pre><code># from the root of the repo.\n$ pre-commit install\n</code></pre> <p>While most rules will be applied automatically, some checks may prevent your code from being committed. The pre-commit output will help you identify which sections need to be addressed.</p> <p>If you choose not to run the hooks on each commit, you can run them manually with <code>pre-commit run --files={your files}</code>.</p> <p>Note</p> <p>If your environment manager did not install pre-commit as a dependency, you can do so via:</p> <pre><code>$ pip install pre-commit\n</code></pre> <p></p>"},{"location":"contributing/#code-formatting-and-linting","title":"Code formatting and linting","text":"<p>We use Ruff to format and lint the <code>G4X-helpers</code> codebase. Ruff is a project dependency and its rules are configured in <code>ruff.toml</code>. It  will be invoked on all code contributions via pre-commit hooks (see above) but you can also run it manually via <code>ruff check</code>.</p> <p></p>"},{"location":"contributing/#documentation","title":"Documentation","text":""},{"location":"contributing/#docstrings","title":"docstrings","text":"<p>We prefer the numpydoc style for writing docstrings. We'd primarily suggest looking at existing docstrings for examples, but the napolean guide to numpy style docstrings is also a great source. If you're unfamiliar with the reStructuredText (rST) markup format, check out the Sphinx rST primer.</p> <p>Look at <code>sc.tl.leiden</code> as an example of a complete docstring.</p>"},{"location":"contributing/#params-section","title":"<code>Params</code> section","text":"<p>The <code>Params</code> abbreviation is a legit replacement for <code>Parameters</code>.</p> <p>To document parameter types use type annotations on function parameters. These will automatically populate the docstrings on import, and when the documentation is built.</p> <p>Use the python standard library types (defined in <code>collections.abc</code> and <code>typing</code> modules) for containers, e.g.  </p> <ul> <li><code>collections.abc.Sequence</code>s (like <code>list</code>),</li> <li><code>collections.abc.Iterable</code>s (like <code>set</code>), and</li> <li><code>collections.abc.Mapping</code>s (like <code>dict</code>).</li> </ul> <p>Always specify what these contain, e.g. <code>{'a': (1, 2)}</code> \u2192 <code>Mapping[str, Tuple[int, int]]</code>. If you can\u2019t use one of those, use a concrete class like <code>AnnData</code>. If your parameter only accepts an enumeration of strings, specify them like so: <code>Literal['elem-1', 'elem-2']</code>.</p>"},{"location":"contributing/#returns-section","title":"<code>Returns</code> section","text":"<ul> <li>Function returns nothing? Use None.</li> <li>Single object: pd.DataFrame \u2014 description on the next line.</li> <li>Multiple values:</li> <li>Prefer a named tuple/dataclass.</li> <li>Otherwise list each element on its own line:</li> </ul> <p><pre><code>Returns\n-------\nnorm : AnnData\n    Normalized copy of the input.\nstats : dict\n    Summary statistics (mean, var, n_cells).\n</code></pre> </p>"},{"location":"contributing/#releasing-and-versioning","title":"Releasing and versioning","text":"<p>Versioning and release tagging in G4X-helpers is handled by the maintainers. Please do not change the project version or the changelog. Just submit your code/docs and they will be incorporated into our release workflow.</p> <p>\u2e3b</p>"},{"location":"features/","title":"CLI features","text":""},{"location":"features/#cli-features","title":"CLI features","text":""},{"location":"features/#g4x-helpers-provides-the-following-cli-commands","title":"G4X-helpers provides the following CLI commands:","text":"<ul> <li>--resegment : reprocess G4X-output with a new segmentation </li> <li>--redemux : reprocess G4X-output with a new transcript manifest </li> <li>--update_bin : update G4X-viewer <code>.bin</code> file with new metadata</li> <li>--new_bin : generate G4X-viewer <code>.bin</code> files from sample output</li> <li>--tar_viewer : package G4X-viewer folder for distribution</li> </ul> <p>\u2e3b</p>"},{"location":"features/new_bin/","title":"--new_bin","text":""},{"location":"features/new_bin/#-new_bin","title":"<code>--new_bin</code>","text":""},{"location":"features/new_bin/#generate-g4x-viewer-bin-files-from-g4x-sample-output","title":"Generate G4X-viewer <code>.bin</code> files from G4X sample output","text":"<p>This tool will create a new <code>.bin</code> segmentation file compatible with the G4X-viewer using the processed output from a G4X run. This is typically only needed to update older outputs to newer versions of the <code>.bin</code> format.</p>"},{"location":"features/new_bin/#usage","title":"usage","text":"<pre><code>$ new_bin \n  --run_base /path/to/G4X_sample_output\n\n  # \u2500\u2500\u2500 optional \u2500\u2500\u2500\n  --out_dir &lt;output_dir&gt;\n  --threads &lt;n_threads&gt;\n  --verbose &lt;level&gt;\n</code></pre>"},{"location":"features/new_bin/#argument-descriptions","title":"argument descriptions","text":""},{"location":"features/new_bin/#required","title":"required","text":""},{"location":"features/new_bin/#-run_base-type-str","title":"<code>--run_base</code>: (type: <code>str</code>)","text":"<p>Path to the base directory containing G4X sample output. This folder should include <code>adata</code> and segmentation files generated by a previous G4X analysis run.</p>"},{"location":"features/new_bin/#optional","title":"optional","text":""},{"location":"features/new_bin/#-out_dir-type-str-default-none","title":"<code>--out_dir</code>: (type: <code>str</code> default: <code>None</code>)","text":"<p>Output directory where the new <code>.bin</code> file will be saved. If not provided, the file will be written in-place to a default path within the <code>run_base</code> directory (<code>g4x_viewer/{sample_id}.bin</code>).</p>"},{"location":"features/new_bin/#-threads-type-int-default-4","title":"<code>--threads</code>: (type: <code>int</code> default: <code>4</code>)","text":"<p>Number of threads to use for processing. Increase this value to speed up the <code>.bin</code> generation process on multi-core machines.</p>"},{"location":"features/new_bin/#-verbose-type-int-default-1","title":"<code>--verbose</code>: (type: <code>int</code> default: <code>1</code>)","text":"<p>Logging verbosity level: - <code>0</code> = WARNING - <code>1</code> = INFO - <code>2</code> = DEBUG This affects how much information is printed to the console during execution.</p> <p></p>"},{"location":"features/redemux/","title":"--redemux","text":""},{"location":"features/redemux/#-redemux","title":"<code>--redemux</code>","text":""},{"location":"features/redemux/#reprocess-g4x-output-with-a-new-transcript-manifest","title":"Reprocess G4X-output with a new transcript manifest","text":"<p>Replaces or updates the transcript manifest in a G4X run, reassigns transcripts via demultiplexing, and regenerates all downstream single-cell data and <code>.tar</code> viewer files.</p>"},{"location":"features/redemux/#usage","title":"usage","text":"<pre><code>$ redemux\n  --run_base /path/to/G4X/output\n  --manifest /path/to/manifest.csv\n\n  # \u2500\u2500\u2500 optional \u2500\u2500\u2500\n  --batch_size &lt;n_transcripts&gt;\n  --out_dir &lt;output_dir&gt;\n  --threads &lt;n_threads&gt;\n  --verbose &lt;level&gt;\n</code></pre>"},{"location":"features/redemux/#argument-descriptions","title":"argument descriptions","text":""},{"location":"features/redemux/#required","title":"required","text":""},{"location":"features/redemux/#-run_base-type-str","title":"<code>--run_base</code>: (type: <code>str</code>)","text":"<p>Path to the G4X sample output folder (the base directory for the run). This directory must contain the required files such as <code>run_meta.json</code>, transcript panel, and feature tables.</p>"},{"location":"features/redemux/#-manifest-type-str","title":"<code>--manifest</code>: (type: <code>str</code>)","text":"<p>Path to the new transcript manifest for demuxing. The manifest must be a 3-column CSV with the following header: <pre><code>target,sequence,read\n</code></pre></p> <ul> <li><code>target</code>: The gene or feature identifier to assign.  </li> <li><code>sequence</code>: The nucleotide sequence associated with the target.  </li> <li><code>read</code>: The read index (e.g. <code>read_1</code> or <code>2</code>) for which the sequence is valid.</li> </ul>"},{"location":"features/redemux/#optional","title":"optional","text":""},{"location":"features/redemux/#-batch_size-type-int-default-1000000","title":"<code>--batch_size</code>: (type: <code>int</code> default: <code>1,000,000</code>)","text":"<p>Number of transcripts to process per batch during demultiplexing. Larger batch sizes may improve performance but increase memory usage.</p>"},{"location":"features/redemux/#-out_dir-type-str-default-none","title":"<code>--out_dir</code>: (type: <code>str</code> default: <code>None</code>)","text":"<p>Output directory where the re-demuxed files will be written. - If not provided, files in the <code>run_base</code> directory will be updated in place. - If provided, the directory will be created (if it does not exist) and symlinked to the original run files (excluding specific diagnostic files).</p>"},{"location":"features/redemux/#-threads-type-int-default-4","title":"<code>--threads</code>: (type: <code>int</code> default: <code>4</code>)","text":"<p>Number of threads to use for processing, including transcript reassignment, segmentation intersection, and viewer file generation.</p>"},{"location":"features/redemux/#-verbose-type-int-default-1","title":"<code>--verbose</code>: (type: <code>int</code> default: <code>1</code>)","text":"<p>Logging verbosity level. - <code>0</code> = WARNING - <code>1</code> = INFO - <code>2</code> = DEBUG  </p> <p></p>"},{"location":"features/resegment/","title":"--resegment","text":""},{"location":"features/resegment/#-resegment","title":"<code>--resegment</code>","text":""},{"location":"features/resegment/#reprocess-g4x-output-with-a-new-segmentation","title":"Reprocess G4X-output with a new segmentation","text":"<p>Replaces or updates the segmentation mask in a G4X run and regenerates all downstream single-cell data and <code>.bin</code> files.</p>"},{"location":"features/resegment/#usage","title":"usage","text":"<pre><code>$ resegment\n  --run_base /path/to/G4X/output \n  --segmentation_mask /path/to/new_mask.npz \n\n  # \u2500\u2500\u2500 optional \u2500\u2500\u2500\n  --sample_id &lt;sample_id&gt; \n  --out_dir &lt;output_dir&gt; \n  --segmentation_mask_key &lt;mask_array_name&gt; \n  --threads &lt;n_threads&gt; \n  --verbose &lt;level&gt;\n</code></pre>"},{"location":"features/resegment/#argument-descriptions","title":"argument descriptions","text":""},{"location":"features/resegment/#required","title":"required","text":""},{"location":"features/resegment/#-run_base-type-str","title":"<code>--run_base</code>: (type: <code>str</code>)","text":"<p>Path to the G4X sample output folder (the base directory for the run). This directory must contain required files such as <code>run_meta.json</code>, segmentation masks, and panel files.</p>"},{"location":"features/resegment/#-segmentation_mask-type-str","title":"<code>--segmentation_mask</code>: (type: <code>str</code>)","text":"<p>Path to the new segmentation mask file. Supported formats include <code>.npy</code>, <code>.npz</code>, and <code>.geojson</code>. This file will be used to replace the existing mask for transcript and protein signal assignment.</p>"},{"location":"features/resegment/#optional","title":"optional","text":""},{"location":"features/resegment/#-sample_id-type-str-default-none","title":"<code>--sample_id</code>: (type: <code>str</code> default: <code>None</code>)","text":"<p>Optional sample identifier. If not provided, the sample ID will be inferred from the name of the <code>run_base</code> directory.</p>"},{"location":"features/resegment/#-out_dir-type-str-default-none","title":"<code>--out_dir</code>: (type: <code>str</code> default: <code>None</code>)","text":"<p>Directory to write the updated segmentation and downstream output files. If not provided, existing files in the <code>run_base</code> directory will be overwritten in-place.</p>"},{"location":"features/resegment/#-segmentation_mask_key-type-str-default-none","title":"<code>--segmentation_mask_key</code>: (type: <code>str</code> default: <code>None</code>)","text":"<p>Specifies the identifier for segmentation labels when loading mask data:</p> <ul> <li> <p>If using a <code>.npz</code> file: Provide the name of the array within the archive that corresponds to the segmentation mask (required if multiple arrays are stored).</p> </li> <li> <p>If using a <code>.geojson</code> file: By default, cell labels are expected in a column named <code>label</code>. Use this argument to override and select a different column as the label source.</p> </li> </ul>"},{"location":"features/resegment/#-threads-type-int-default-4","title":"<code>--threads</code>: (type: <code>int</code> default: <code>4</code>)","text":"<p>Number of threads to use for segmentation, signal extraction, and downstream computation.</p>"},{"location":"features/resegment/#-verbose-type-int-default-1","title":"<code>--verbose</code>: (type: <code>int</code> default: <code>1</code>)","text":"<p>Logging verbosity level. This affects how much information is printed to the console during execution.  </p> <ul> <li><code>0</code> = WARNING  </li> <li><code>1</code> = INFO  </li> <li><code>2</code> = DEBUG</li> </ul> <p></p>"},{"location":"features/tar_viewer/","title":"--tar_viewer","text":""},{"location":"features/tar_viewer/#-tar_viewer","title":"<code>--tar_viewer</code>","text":""},{"location":"features/tar_viewer/#package-g4x-viewer-folder-for-distribution","title":"Package G4X-viewer Folder for Distribution","text":"<p>Tars a G4X-viewer folder by validating and organizing key viewer assets (e.g., <code>.bin</code>, <code>.ome.tiff</code>, <code>.tar</code>, etc.), generating the required <code>dataset.config.json</code> metadata file, and creating a <code>.tar</code> archive ready for use with the Single-File upload option in the G4X-viewer.</p>"},{"location":"features/tar_viewer/#usage","title":"usage","text":"<pre><code>$ tar_viewer --viewer_dir /path/to/g4x_viewer_folder\n</code></pre>"},{"location":"features/tar_viewer/#argument-description","title":"argument description","text":""},{"location":"features/tar_viewer/#-viewer_dir-type-str","title":"<code>--viewer_dir</code>: (type: <code>str</code>)","text":"<p>Path to the G4X-viewer folder that contains the data and metadata to be packaged. This folder must contain: - A single <code>.bin</code> file - A <code>{sample_id}.ome.tiff</code> image file - A <code>{sample_id}_run_metadata.json</code> file - A <code>{sample_id}.tar</code> transcript file - A <code>{sample_id}_HE.ome.tiff</code> file (H&amp;E), which will be moved into a subdirectory <code>h_and_e/</code></p> <p></p>"},{"location":"features/update_bin/","title":"--update_bin","text":""},{"location":"features/update_bin/#-update_bin","title":"<code>--update_bin</code>","text":""},{"location":"features/update_bin/#update-g4x-viewer-bin-file-with-new-metadata","title":"Update G4X-viewer <code>.bin</code> file with new metadata","text":"<p>Updates an existing <code>.bin</code> segmentation file with new clustering, embedding, or color metadata from a CSV file.</p>"},{"location":"features/update_bin/#usage","title":"usage","text":"<pre><code>$ update_bin \n  --bin_file /path/to/sample.bin\n  --out_path /path/to/updated_sample.bin\n  --metadata /path/to/metadata.csv\n\n  # \u2500\u2500\u2500 optional \u2500\u2500\u2500\n  --cellid_key &lt;cellid_key&gt;\n  --cluster_key &lt;cluster_key&gt;\n  --cluster_color_key &lt;cluster_color_key&gt;\n  --emb_key &lt;emb_key&gt;\n  --verbose &lt;level&gt;\n</code></pre>"},{"location":"features/update_bin/#argument-descriptions","title":"argument descriptions","text":""},{"location":"features/update_bin/#required","title":"required","text":""},{"location":"features/update_bin/#-bin_file-type-str","title":"<code>--bin_file</code>: (type: <code>str</code>)","text":"<p>Path to the existing <code>.bin</code> file used by the G4X-Viewer. This file will be updated with metadata from the provided CSV file.</p>"},{"location":"features/update_bin/#-out_path-type-str","title":"<code>--out_path</code>: (type: <code>str</code>)","text":"<p>Output path where the updated <code>.bin</code> file will be saved. The directory will be created if it doesn't already exist.</p>"},{"location":"features/update_bin/#-metadata-type-str","title":"<code>--metadata</code>: (type: <code>str</code>)","text":"<p>Path to a CSV file containing metadata to update the <code>.bin</code> file. This file must include a header row and should contain cell IDs, optional cluster assignments, colors, and embeddings.</p>"},{"location":"features/update_bin/#optional","title":"optional","text":""},{"location":"features/update_bin/#-cellid_key-type-str-default-none","title":"<code>--cellid_key</code>: (type: <code>str</code> default: <code>None</code>)","text":"<p>Name of the column in the metadata file that contains cell IDs matching those in the <code>.bin</code> file. If not provided, the first column in the metadata will be used.</p>"},{"location":"features/update_bin/#-cluster_key-type-str-default-none","title":"<code>--cluster_key</code>: (type: <code>str</code> default: <code>None</code>)","text":"<p>Column name in the metadata that provides cluster assignments for each cell. Required if <code>--cluster_color_key</code> is used.</p>"},{"location":"features/update_bin/#-cluster_color_key-type-str-default-none","title":"<code>--cluster_color_key</code>: (type: <code>str</code> default: <code>None</code>)","text":"<p>Column name in the metadata that provides RGB or hex colors for each cluster. Must be used in conjunction with <code>--cluster_key</code>.</p>"},{"location":"features/update_bin/#-emb_key-type-str-default-none","title":"<code>--emb_key</code>: (type: <code>str</code> default: <code>None</code>)","text":"<p>Prefix for embedding coordinates. The script will look for two columns: <code>{emb_key}_0</code> and <code>{emb_key}_1</code>. Used to embed cells in UMAP/tSNE/etc. space.</p>"},{"location":"features/update_bin/#-verbose-type-int-default-1","title":"<code>--verbose</code>: (type: <code>int</code> default: <code>1</code>)","text":"<p>Logging verbosity level: - <code>0</code> = WARNING - <code>1</code> = INFO - <code>2</code> = DEBUG This affects how much information is printed to the console during execution.</p> <p></p>"},{"location":"installation/","title":"installation","text":""},{"location":"installation/#installing-g4x-helpers","title":"Installing G4X-helpers","text":"<p>These pages explain how you can obtain G4X-helpers and set up your system to use it.  Installation can be done either via source installation or utilizing a Docker image. Which route to choose depends on your use-case.</p> <p></p>"},{"location":"installation/#1-source-installation","title":"1. source installation","text":"<p>Please head to the source installation section if you want to:</p> <ul> <li>use the <code>G4X-helpers</code> CLI directly on your machine</li> <li>use the package beyond the CLI features exposed in the Docker image</li> <li>develop or debug the codebase</li> <li>integrate pieces of the library into your own Python environment</li> </ul>"},{"location":"installation/#2-docker-setup","title":"2. Docker setup","text":"<p>Please head to the Docker setup section if you want to:</p> <ul> <li>avoid creating or managing local Python environments</li> <li>guarantee reproducibility (everyone runs the exact same image)</li> <li>run G4X-helpers easily on different systems</li> <li>stay isolated and want to ensure that nothing leaks to or depends on your system</li> </ul> <p>Things to know:  </p> <ul> <li>you still need to install Docker (or Apptainer, Podman ... ) if you haven't already.</li> <li>first pull can be large; subsequent runs are fast thanks to caching layers.</li> </ul> <p>\u2e3b</p>"},{"location":"installation/docker/","title":"Docker setup","text":""},{"location":"installation/docker/#docker-setup","title":"Docker setup","text":"<p>If you prefer working with Docker or you don\u2019t want to install G4X-helpers locally, you can run its CLI tools from the Docker image that is published along with the repository.</p> <p>If you have Docker already installed (or Apptainer, Podman ... ) and are familiar with using it, you can continue to the G4X-helpers Docker usage section.  </p> <p>Otherwise, please read on to get started.</p> <p>Why use Docker?</p> <ul> <li>no local installs: skip creating a Python environment.  </li> <li>reproducibility: everyone uses the same environment.  </li> <li>isolated: nothing leaks into (or depends on) your system Python.  </li> <li>great for HPC/servers: just bind your data directories.</li> </ul> <p></p>"},{"location":"installation/docker/#step-1-install-docker","title":"Step 1: Install Docker","text":"<p>Docker is available for most platforms. Please refer to the Docker installation guide for Docker Engine (Linux), or Docker Desktop (MacOS/Windows). If you are not sure if Docker is already installed, you can simply call <code>docker --version</code> in your terminal.</p> <p></p>"},{"location":"installation/docker/#step-2-pull-the-g4x-helpers-image","title":"Step 2: Pull the G4X-helpers image","text":"<p>The docker pull command downloads the G4X-helpers container image (and all of its layers) from GitHub\u2019s Container Registry ( ghcr.io ) to your local Docker cache.</p> <pre><code>docker pull ghcr.io/singular-genomics/g4x-helpers:latest\n</code></pre> <p>Once the image is pulled, you can start new containers from it instantly \u2014 even when you\u2019re offline \u2014 without re-fetching data from the registry.</p> <p>Tip</p> <p><code>latest</code> will always retrieve the most recently published build. You can replace it with an explicit tag, which locks you to a reproducible version. e.g. <code>ghcr.io/singular-genomics/g4x-helpers:v0.4.11</code> </p> <p>if the pull was successful, you can confirm that the image is available by calling</p> <pre><code>docker image ls ghcr.io/singular-genomics/g4x-helpers\n</code></pre> <p>You are now ready to use the G4X-helpers Docker image. Please refer to the Docker usage section to learn how to run the tools.</p> <p></p>"},{"location":"installation/docker/#updating-cleaning-up-docker-images","title":"Updating &amp; cleaning up docker images","text":"<p>You can update your image by running <code>docker pull</code> again</p> <p><pre><code>docker pull ghcr.io/singular-genomics/g4x-helpers:latest\n</code></pre> It will only download the layers that have changed since your last pull, giving you the newest build.</p> <p>Over time, old images, stopped containers and dangling volumes can consume disk space.  </p> <p>A useful one-shot cleanup command is:</p> <pre><code>docker system prune -a\n</code></pre> <p>For more general information on how to utilize the features of CLI Docker, please refer to the Docker documentation.</p> <p>\u2e3b</p>"},{"location":"installation/source/","title":"source install","text":""},{"location":"installation/source/#source-installation","title":"source installation","text":"<p>This page explains how you can install <code>G4X-helpers</code> on your local machine. If you\u2019re happy running the tool via <code>Docker</code>, you can skip these installation steps and head to the Docker setup section.  </p> <p>You only need a local install if you want to:</p> <ul> <li>use the <code>G4X-helpers</code> CLI directly on your machine</li> <li>use the package beyond the CLI features exposed in the Docker image</li> <li>develop or debug the codebase</li> <li>integrate pieces of the library into your own Python environment</li> </ul> <p>If these use cases apply to you, please read on</p> <p></p>"},{"location":"installation/source/#step-1-clone-the-g4x-helpers-repository","title":"Step 1: clone the <code>G4X-helpers</code> repository","text":"<pre><code>git clone https://github.com/singular-genomics/g4x-helpers\n</code></pre> <p>navigate to the repo directory: <pre><code>cd G4X-helpers\n</code></pre></p> <p>Note</p> <p>All subsequent steps assume that you are in the G4X-helpers directory. You can confirm this in your terminal via <code>pwd</code>. You should see a path ending in: <code>/G4X-helpers</code>. <pre><code>&gt; pwd\n/path/to/current/directory/.../G4X-helpers\n</code></pre></p> <p></p>"},{"location":"installation/source/#step-2-install-the-package","title":"Step 2: install the package","text":"<p>Note</p> <p>G4X-helpers depends on <code>Glymur</code> and <code>OpenJPEG &gt;= 2.2.0</code> for multi-threaded image loading. On some systems, Glymur may require additional configuration to detect OpenJPEG.</p> <p>Due to those limitations we strongly suggest installing OpenJPEG, and thus G4X-helpers, via <code>conda</code>, as it reliably provides compatible and properly linked dependencies across platforms. Other installation methods (e.g., Homebrew or manual builds) may lead to issues such as Glymur reporting version <code>0.0.0</code> or failing to load JPEG 2000 (.jp2) images.  </p> <p></p> Conda (recommended)pipuv <p></p>"},{"location":"installation/source/#create-a-conda-environment","title":"Create a <code>conda</code> environment","text":"<p>Install miniconda, conda, or mamba (instructions). </p> <p>If this is your first time using conda:</p> <pre><code>conda init\n</code></pre> <p>Create the environment:</p> <pre><code>conda create -n g4x-helpers_env python=3.10\n</code></pre> <p>Activate the environment:</p> <pre><code>conda activate g4x-helpers_env\n</code></pre> <p>Install the package:</p> <pre><code>pip install .\n</code></pre>"},{"location":"installation/source/#install-into-your-current-python-environment-via-pip","title":"Install into your current python environment via <code>pip</code>","text":"<p>Warning</p> <p><code>pip</code> does not create or manage virtual environments, so installing through <code>pip install .</code> will require that your local Python version is compatible with the package dependencies (<code>Python &gt;= 3.10</code>).</p> <pre><code>pip install .\n</code></pre>"},{"location":"installation/source/#create-a-venv-using-uv","title":"Create a <code>venv</code> using uv","text":"<p><pre><code>uv sync\n</code></pre> activate the environment  </p> <pre><code>source .venv/bin/activate\n</code></pre>"},{"location":"installation/source/#step-3-verify-openjpeg-installation","title":"Step 3: Verify OpenJPEG installation","text":"<p>After installation of <code>G4X-helpers</code>, confirm that Glymur recognizes OpenJPEG via:</p> <pre><code>python -c \"import glymur; print(glymur.version.openjpeg_version)\"\n</code></pre> <p>Success: Version &gt;=2.2.0</p> <p>The output shows a version string &gt;2.2.0 <pre><code>2.4.1\n</code></pre></p> <p>Failure: Version &lt;2.2.0</p> <pre><code>0.0.0\n</code></pre> <p>If your OpenJPEG is installed and was detected successfully, you can now proceed to use G4X-helpers.</p> <p>If Glymur does not detect a compatible OpenJPEG version, please follow the steps below. If this happens, we strongly suggest performing the G4X-helpers installation and the following steps in a <code>conda</code> environment.</p> <p>If the above installation was done using <code>uv</code> and Glymur failed to detect OpenJPEG, you will likely need to do the next steps with Homebrew, since conda installations are not visible to uv virtual environments.</p> <p>Hints on other systems are provided, but not supported! You can find further details in the Glymur documentation on advanced installation methods.</p> <p></p>"},{"location":"installation/source/#step-4-install-openjpeg","title":"Step 4: Install OpenJPEG","text":"conda (recommended)Homebrew <p>Install openjpeg through <code>conda</code></p> <pre><code>conda install -c conda-forge openjpeg\n</code></pre> <p>Return to Step 3 to verify that Glymur detects OpenJPEG with a version &gt;=2.2.0.</p> <p>Install OpenJPEG and pkg-config</p> <pre><code>brew install openjpeg pkg-config\n</code></pre> <p>Create a Glymur config directory</p> <pre><code>mkdir -p ~/.config/glymur\n</code></pre> <p>Add the Homebrew installed OpenJPEG path to a glymurrc file in the config</p> <pre><code>printf \"[library]\\nopenjp2 = /opt/homebrew/lib/libopenjp2.dylib\\n\" &gt; ~/.config/glymur/glymurrc\n</code></pre> <p>Return to Step 3 to verify that Glymur detects OpenJPEG with a version &gt;=2.2.0.</p> <p></p>"},{"location":"installation/source/#step-5-verify-installation","title":"Step 5: Verify installation","text":"<p>To start using G4X-helpers, ensure that you have activated the environment in which the package was installed.  If your installation of G4X-helpers was successful, you can call the following commands from any terminal and help statements should be printed:</p> <ul> <li><code>resegment --help</code> </li> <li><code>update_bin --help</code> </li> <li><code>new_bin --help</code> </li> <li><code>tar_viewer --help</code></li> </ul> <p>Tip</p> <p>You can see the expected output of the <code>--help</code> statements in the CLI usage section.</p> <p>\u2e3b</p>"},{"location":"usage/","title":"usage","text":""},{"location":"usage/#usage","title":"usage","text":"<p>G4X-helpers offers several tools for common post-processing needs, each of which is described in detail in the CLI features section. On this page, we will demonstrate how to execute these tools either from the CLI or through a Docker image (depending on how you installed G4X-helpers).</p> <p>Note</p> <p>G4X-helpers can also be imported as a Python module, in which case it can provide some convenience functions to access and interact with your data. Documentation for this will follow in a separate section.</p> <p></p>"},{"location":"usage/#cli-usage","title":"CLI Usage","text":""},{"location":"usage/#activating-your-environment","title":"Activating your environment","text":"<p>Before getting started, you need to ensure that the environment in which you installed G4X-helpers is activated. How this is done depends on your installation method. We recommend installing it into a Conda environment. </p> condauv <p>If you created an environment with the name <code>g4x-helpers_env</code>, you will activate it with the following command:</p> <pre><code>conda activate g4x-helpers_env\n</code></pre> <p>Once activated, your shell prompt should change to include the environment name:</p> <p><pre><code>(g4x-helpers_env) $\n</code></pre> You can further verify that you\u2019re using the correct interpreter:</p> <pre><code>(g4x-helpers_env) $ which python\n/Users/you/miniconda3/envs/g4x-helpers_env/bin/python\n</code></pre> <pre><code>source .venv/bin/activate\n</code></pre> <p>Once activated, your shell prompt should change to include the environment name (<code>g4x_helpers_env</code> in this case):</p> <pre><code>(g4x-helpers_env) $\n</code></pre> <p>You can further verify that you\u2019re using the correct interpreter:</p> <pre><code>(g4x-helpers_env) $ which python\n/Users/you/miniconda3/envs/g4x-helpers_env/bin/python\n</code></pre> <p></p>"},{"location":"usage/#basic-command-pattern","title":"Basic command pattern","text":"<p>Every command follows standard CLI syntax:</p> <pre><code>command_name --option_1 VALUE_OPTION_1 --option_2 VALUE_OPTION_2\n</code></pre> <p>To use these functions, you will need the contents of a G4X-output folder (which is referred to as <code>run_base</code>) and in some cases some externally generated files.</p>"},{"location":"usage/#example-using-resegment-from-the-cli","title":"Example: using <code>--resegment</code> from the CLI","text":"<p>In the following example we want to apply a custom cell segmentation to our data, which is done via the <code>--resegment</code> tool.</p> <p>In the feature reference for this command, we can see that there are required and optional arguments. We can also call <code>resegment --help</code> to see which arguments the tool accepts:</p> <pre><code>usage: resegment [-h] --run_base RUN_BASE --segmentation_mask SEGMENTATION_MASK [--sample_id SAMPLE_ID] [--out_dir OUT_DIR]\n                [--segmentation_mask_key SEGMENTATION_MASK_KEY] [--threads THREADS] [--verbose VERBOSE]\n\noptions:\n-h, --help            show this help message and exit\n--run_base RUN_BASE   Path to G4X sample output folder\n    ...\n</code></pre> <p>In our scenario, we will provide the following values:</p> argument value type <code>--run_base</code> /path/to/g4x_output/directory/sample_id directory <code>--segmentation_mask</code> /path/to/custom/segmentation/seg_mask.npz .npz file <code>--sample_id</code> sample_A01 string <code>--out_dir</code> /path/to/resegmentation/output directory <p>The full command to run this operation is:</p> <pre><code>resegment \\\n    --run_base /path/to/g4x_output/directory/sample_id \\\n    --segmentation_mask /path/to/custom/segmentation/seg_mask.npz \\\n    --sample_id sample_A01 \\\n    --out_dir /path/to/resegmentation/output \n</code></pre> <p>If your command was successful, you will start seeing the output log of the <code>resegment</code> process.</p> <p></p>"},{"location":"usage/#docker-usage","title":"Docker Usage","text":""},{"location":"usage/#pull-the-g4x-helpers-image","title":"Pull the G4X-helpers image","text":"<p>If you haven't done so already (maybe you skipped the Docker setup section) you will first need to pull the G4X-helper Docker image. This is done via <code>docker pull</code>, which downloads the image (and all of its layers) from GitHub\u2019s Container Registry ( ghcr.io ) to your local Docker cache.</p> <pre><code>docker pull ghcr.io/singular-genomics/g4x-helpers:latest\n</code></pre> <p>If you want to run a specific version, please refer to the Docker setup section for details.</p>"},{"location":"usage/#basic-command-pattern_1","title":"Basic command pattern","text":"<p>When running via Docker, the pattern is similar to invoking a CLI command, with the exception that all paths and the Docker image need to be specified. Inside the container, always reference the mounted paths (e.g. <code>/data/...</code>), not the host paths (see full example below).</p> <pre><code>docker run --rm \\\n  -v /host/path/to/g4x_output:/data/g4x_output \\\n  -v /host/path/to/other_inputs:/data/inputs \\\n  -v /host/path/to/outputs:/data/outputs \\\n  ghcr.io/singular-genomics/g4x-helpers:latest \\\n  command_name --option_1 VALUE_OPTION_1 --option_2 VALUE_OPTION_2\n</code></pre> <ul> <li><code>-v host:container</code> mounts your folder to let the container see your files. </li> <li><code>--rm</code> cleans up the container after it exits.+</li> <li><code>ghcr.io/singular-genomics/g4x-helpers:latest</code> uses the latest version of G4X-helpers</li> </ul>"},{"location":"usage/#example-using-resegment-in-docker","title":"example: using <code>--resegment</code> in Docker","text":"<p>Here we run the same <code>--resegment</code> command as in the cli-example above</p> <pre><code>docker run --rm \\\n  -v /path/to/g4x_output/directory:/data/g4x_output \\\n  -v /path/to/custom/segmentation:/data/inputs \\\n  -v /path/to/resegmentation/output:/data/outputs \\\n  ghcr.io/your-org/g4x-helpers:latest \\\n  resegment \\\n    --run_base /data/g4x_output/sample_id \\\n    --segmentation_mask /data/inputs/seg_mask.npz \\\n    --sample_id sample_A01 \\\n    --out_dir /data/outputs/resegmentation\n</code></pre> <p>\u2e3b</p>"}]}